<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xsd:schema xmlns:site="http://www.soluvas.com/schema/site/1.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsd="http://www.w3.org/2001/XMLSchema" targetNamespace="http://www.soluvas.com/schema/site/1.0">
  <xsd:import namespace="http://www.omg.org/XMI" schemaLocation="platform:/plugin/org.eclipse.emf.ecore/model/XMI.xsd"/>
  <xsd:complexType name="PageMeta">
    <xsd:annotation>
      <xsd:documentation>Low-level meta-information about a HTML page.

For practical purposes, these are usually provided dynamically. However, some information, like favicon URIs and OpenGraph siteName are usually provided statically from application's site catalog XMI e.g. berbatik.SiteCatalog.xmi.

Note that PageMeta uses low-level HTML title, not a "CMS title" (which needs to be reformatted i.e. with prefix &amp; suffix).
It also distinguishes between meta description and og:description.
So it doesn't fit well to be provided statically.</xsd:documentation>
    </xsd:annotation>
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element name="icon" type="site:PageIcon"/>
      <xsd:element name="openGraph" type="site:OpenGraphMeta"/>
      <xsd:element name="openGraphImage" type="site:OpenGraphImage"/>
      <xsd:element name="openGraphVideo" type="site:OpenGraphVideo"/>
      <xsd:element name="openGraphAudio" type="site:OpenGraphAudio"/>
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
    <xsd:attribute name="languageCode" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>Used in "html" tag, recommended is "en".</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="charset" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>Recommended: utf-8.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="title" type="xsd:string"/>
    <xsd:attribute name="keywords" type="xsd:string"/>
    <xsd:attribute name="description" type="xsd:string"/>
    <xsd:attribute name="viewport" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>Recommended: width=device-width, initial-scale=1.0</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="author" type="xsd:string"/>
  </xsd:complexType>
  <xsd:element name="PageMeta" type="site:PageMeta">
    <xsd:annotation>
      <xsd:documentation>Low-level meta-information about a HTML page.

For practical purposes, these are usually provided dynamically. However, some information, like favicon URIs and OpenGraph siteName are usually provided statically from application's site catalog XMI e.g. berbatik.SiteCatalog.xmi.

Note that PageMeta uses low-level HTML title, not a "CMS title" (which needs to be reformatted i.e. with prefix &amp; suffix).
It also distinguishes between meta description and og:description.
So it doesn't fit well to be provided statically.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="PageIcon">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
    <xsd:attribute name="faviconUri" type="xsd:string"/>
    <xsd:attribute name="icon57Uri" type="xsd:string"/>
    <xsd:attribute name="icon72Uri" type="xsd:string"/>
    <xsd:attribute name="icon114Uri" type="xsd:string"/>
    <xsd:attribute name="icon144Uri" type="xsd:string"/>
  </xsd:complexType>
  <xsd:element name="PageIcon" type="site:PageIcon"/>
  <xsd:complexType name="OpenGraphMeta">
    <xsd:annotation>
      <xsd:documentation>The Open Graph protocol enables any web page to become a rich object in a social graph. For instance, this is used on Facebook to allow any web page to have the same functionality as any other object on Facebook.

While many different technologies and schemas exist and could be combined together, there isn't a single technology which provides enough information to richly represent any web page within the social graph. The Open Graph protocol builds on these existing technologies and gives developers one thing to implement. Developer simplicity is a key goal of the Open Graph protocol which has informed many of the technical design decisions.

Basic Metadata
To turn your web pages into graph objects, you need to add basic metadata to your page. We've based the initial version of the protocol on RDFa which means that you'll place additional &lt;meta&gt; tags in the &lt;head&gt; of your web page. The four required properties for every page are:

og:title - The title of your object as it should appear within the graph, e.g., "The Rock".
og:type - The type of your object, e.g., "video.movie". Depending on the type you specify, other properties may also be required.
og:image - An image URL which should represent your object within the graph.
og:url - The canonical URL of your object that will be used as its permanent ID in the graph, e.g., "http://www.imdb.com/title/tt0117500/".
As an example, the following is the Open Graph protocol markup for The Rock on IMDB:

&lt;html prefix="og: http://ogp.me/ns#"&gt;
&lt;head&gt;
&lt;title&gt;The Rock (1996)&lt;/title&gt;
&lt;meta property="og:title" content="The Rock" /&gt;
&lt;meta property="og:type" content="video.movie" /&gt;
&lt;meta property="og:url" content="http://www.imdb.com/title/tt0117500/" /&gt;
&lt;meta property="og:image" content="http://ia.media-imdb.com/images/rock.jpg" /&gt;
...
&lt;/head&gt;
...
&lt;/html&gt;
Optional Metadata
The following properties are optional for any object and are generally recommended:

og:audio - A URL to an audio file to accompany this object.
og:description - A one to two sentence description of your object.
og:determiner - The word that appears before this object's title in a sentence. An enum of (a, an, the, "", auto). If auto is chosen, the consumer of your data should chose between "a" or "an". Default is "" (blank).
og:locale - The locale these tags are marked up in. Of the format language_TERRITORY. Default is en_US.
og:locale:alternate - An array of other locales this page is available in.
og:site_name - If your object is part of a larger web site, the name which should be displayed for the overall site. e.g., "IMDb".
og:video - A URL to a video file that complements this object.
For example (line-break solely for display purposes):

&lt;meta property="og:audio" content="http://example.com/bond/theme.mp3" /&gt;
&lt;meta property="og:description" 
  content="Sean Connery found fame and fortune as the
           suave, sophisticated British agent, James Bond." /&gt;
&lt;meta property="og:determiner" content="the" /&gt;
&lt;meta property="og:locale" content="en_GB" /&gt;
&lt;meta property="og:locale:alternate" content="fr_FR" /&gt;
&lt;meta property="og:locale:alternate" content="es_ES" /&gt;
&lt;meta property="og:site_name" content="IMDb" /&gt;
&lt;meta property="og:video" content="http://example.com/bond/trailer.swf" /&gt;
The RDF schema (in Turtle) can be found at ogp.me/ns.

Structured Properties
Some properties can have extra metadata attached to them. These are specified in the same way as other metadata with property and content, but the property will have extra :.

The og:image property has some optional structured properties:

og:image:url - Identical to og:image.
og:image:secure_url - An alternate url to use if the webpage requires HTTPS.
og:image:type - A MIME type for this image.
og:image:width - The number of pixels wide.
og:image:height - The number of pixels high.
A full image example:

&lt;meta property="og:image" content="http://example.com/ogp.jpg" /&gt;
&lt;meta property="og:image:secure_url" content="https://secure.example.com/ogp.jpg" /&gt;
&lt;meta property="og:image:type" content="image/jpeg" /&gt;
&lt;meta property="og:image:width" content="400" /&gt;
&lt;meta property="og:image:height" content="300" /&gt;
The og:video tag has the identical tags as og:image. Here is an example:

&lt;meta property="og:video" content="http://example.com/movie.swf" /&gt;
&lt;meta property="og:video:secure_url" content="https://secure.example.com/movie.swf" /&gt;
&lt;meta property="og:video:type" content="application/x-shockwave-flash" /&gt;
&lt;meta property="og:video:width" content="400" /&gt;
&lt;meta property="og:video:height" content="300" /&gt;
The og:audio tag only has the first 3 properties available (since size doesn't make sense for sound):

&lt;meta property="og:audio" content="http://example.com/sound.mp3" /&gt;
&lt;meta property="og:audio:secure_url" content="https://secure.example.com/sound.mp3" /&gt;
&lt;meta property="og:audio:type" content="audio/mpeg" /&gt;
Arrays
If a tag can have multiple values, just put multiple versions of the same &lt;meta&gt; tag on your page. The first tag (from top to bottom) is given preference during conflicts.

&lt;meta property="og:image" content="http://example.com/rock.jpg" /&gt;
&lt;meta property="og:image" content="http://example.com/rock2.jpg" /&gt;
Put structured properties after you declare their root tag. Whenever another root element is parsed, that structured property is considered to be done and another one is started.

For example:

&lt;meta property="og:image" content="http://example.com/rock.jpg" /&gt;
&lt;meta property="og:image:width" content="300" /&gt;
&lt;meta property="og:image:height" content="300" /&gt;
&lt;meta property="og:image" content="http://example.com/rock2.jpg" /&gt;
&lt;meta property="og:image" content="http://example.com/rock3.jpg" /&gt;
&lt;meta property="og:image:height" content="1000" /&gt;
means there are 3 images on this page, the first image is 300x300, the middle one has unspecified dimensions, and the last one is 1000px tall.

Object Types
In order for your object to be represented within the graph, you need to specify its type. This is done using the og:type property:

&lt;meta property="og:type" content="website" /&gt;
When the community agrees on the schema for a type, it is added to the list of global types. All other objects in the type system are CURIEs of the form

&lt;head prefix="my_namespace: http://example.com/ns#"&gt;
&lt;meta property="og:type" content="my_namespace:my_type" /&gt;
The global types are grouped into verticals. Each vertical has its own namespace. The og:type values for a namespace are always prefixed with the namespace and then a period. This is to reduce confusion with user-defined namespaced types which always have colons in them.

Music
Namespace URI: http://ogp.me/ns/music#
og:type values:

music.song

music:duration - integer &gt;=1 - The song's length in seconds.
music:album - music.album array - The album this song is from.
music:album:disc - integer &gt;=1 - Which disc of the album this song is on.
music:album:track - integer &gt;=1 - Which track this song is.
music:musician - profile array - The musician that made this song.
music.album

music:song - music.song - The song on this album.
music:song:disc - integer &gt;=1 - The same as music:album:disc but in reverse.
music:song:track - integer &gt;=1 - The same as music:album:track but in reverse.
music:musician - profile - The musician that made this song.
music:release_date - datetime - The date the album was released.
music.playlist

music:song - Identical to the ones on music.album
music:song:disc
music:song:track
music:creator - profile - The creator of this playlist.
music.radio_station

music:creator - profile - The creator of this station.
Video
Namespace URI: http://ogp.me/ns/video#
og:type values:

video.movie

video:actor - profile array - Actors in the movie.
video:actor:role - string - The role they played.
video:director - profile array - Directors of the movie.
video:writer - profile array - Writers of the movie.
video:duration - integer &gt;=1 - The movie's length in seconds.
video:release_date - datetime - The date the movie was released.
video:tag - string array - Tag words associated with this movie.
video.episode

video:actor - Identical to video.movie
video:actor:role
video:director
video:writer
video:duration
video:release_date
video:tag
video:series - video.tv_show - Which series this episode belongs to.
video.tv_show

A multi-episode TV show. The metadata is identical to video.movie.

video.other

A video that doesn't belong in any other category. The metadata is identical to video.movie.

No Vertical
These are globally defined objects that just don't fit into a vertical but yet are broadly used and agreed upon.

og:type values:

article - Namespace URI: http://ogp.me/ns/article#

article:published_time - datetime - When the article was first published.
article:modified_time - datetime - When the article was last changed.
article:expiration_time - datetime - When the article is out of date after.
article:author - profile array - Writers of the article.
article:section - string - A high-level section name. E.g. Technology
article:tag - string array - Tag words associated with this article.
book - Namespace URI: http://ogp.me/ns/book#

book:author - profile array - Who wrote this book.
book:isbn - string - The ISBN
book:release_date - datetime - The date the book was released.
book:tag - string array - Tag words associated with this book.
profile - Namespace URI: http://ogp.me/ns/profile#

profile:first_name - string - A name normally given to an individual by a parent or self-chosen.
profile:last_name - string - A name inherited from a family or marriage and by which the individual is commonly known.
profile:username - string - A short unique string to identify them.
profile:gender - enum(male, female) - Their gender.
website - Namespace URI: http://ogp.me/ns/website#

No additional properties other than the basic ones. Any non-marked up webpage should be treated as og:type website.

Types
The following types are used when defining attributes in Open Graph protocol.

Type	Description	Literals
Boolean	A Boolean represents a true or false value	true, false, 1, 0
DateTime	A DateTime represents a temporal value composed of a date (year, month, day) and an optional time component (hours, minutes)	ISO 8601
Enum	A type consisting of bounded set of constant string values (enumeration members).	A string value that is a member of the enumeration
Float	A 64-bit signed floating point number	All literals that conform to the following formats:

1.234
-1.234
1.2e3
-1.2e3
7E-10
Integer	A 32-bit signed integer. In many languages integers over 32-bits become floats, so we limit Open Graph protocol for easy multi-language use.	All literals that conform to the following formats:

1234
-123
String	A sequence of Unicode characters	All literals composed of Unicode characters with no escape characters
URL	A sequence of Unicode characters that identify an Internet resource.	All valid URLs that utilize the http:// or https:// protocols
</xsd:documentation>
    </xsd:annotation>
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element name="localeAlternates" nillable="true" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation>og:locale:alternate - An array of other locales this page is available in.
</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
    <xsd:attribute name="title" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>og:title. The title of your object as it should appear within the graph, e.g., "The Rock".</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="type" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>og:type. The type of your object, e.g., "video.movie". Depending on the type you specify, other properties may also be required.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="image" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>og:image - An image URL which should represent your object within the graph.
</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="url" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>og:url - The canonical URL of your object that will be used as its permanent ID in the graph, e.g., "http://www.imdb.com/title/tt0117500/".</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="audio" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>og:audio - A URL to an audio file to accompany this object.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="description" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>og:description - A one to two sentence description of your object.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="determiner" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>og:determiner - The word that appears before this object's title in a sentence. An enum of (a, an, the, "", auto). If auto is chosen, the consumer of your data should chose between "a" or "an". Default is "" (blank).</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="locale" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>og:locale - The locale these tags are marked up in. Of the format language_TERRITORY. Default is en_US.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="siteName" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>og:site_name - If your object is part of a larger web site, the name which should be displayed for the overall site. e.g., "IMDb".</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="video" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>og:video - A URL to a video file that complements this object.
</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:element name="OpenGraphMeta" type="site:OpenGraphMeta">
    <xsd:annotation>
      <xsd:documentation>The Open Graph protocol enables any web page to become a rich object in a social graph. For instance, this is used on Facebook to allow any web page to have the same functionality as any other object on Facebook.

While many different technologies and schemas exist and could be combined together, there isn't a single technology which provides enough information to richly represent any web page within the social graph. The Open Graph protocol builds on these existing technologies and gives developers one thing to implement. Developer simplicity is a key goal of the Open Graph protocol which has informed many of the technical design decisions.

Basic Metadata
To turn your web pages into graph objects, you need to add basic metadata to your page. We've based the initial version of the protocol on RDFa which means that you'll place additional &lt;meta&gt; tags in the &lt;head&gt; of your web page. The four required properties for every page are:

og:title - The title of your object as it should appear within the graph, e.g., "The Rock".
og:type - The type of your object, e.g., "video.movie". Depending on the type you specify, other properties may also be required.
og:image - An image URL which should represent your object within the graph.
og:url - The canonical URL of your object that will be used as its permanent ID in the graph, e.g., "http://www.imdb.com/title/tt0117500/".
As an example, the following is the Open Graph protocol markup for The Rock on IMDB:

&lt;html prefix="og: http://ogp.me/ns#"&gt;
&lt;head&gt;
&lt;title&gt;The Rock (1996)&lt;/title&gt;
&lt;meta property="og:title" content="The Rock" /&gt;
&lt;meta property="og:type" content="video.movie" /&gt;
&lt;meta property="og:url" content="http://www.imdb.com/title/tt0117500/" /&gt;
&lt;meta property="og:image" content="http://ia.media-imdb.com/images/rock.jpg" /&gt;
...
&lt;/head&gt;
...
&lt;/html&gt;
Optional Metadata
The following properties are optional for any object and are generally recommended:

og:audio - A URL to an audio file to accompany this object.
og:description - A one to two sentence description of your object.
og:determiner - The word that appears before this object's title in a sentence. An enum of (a, an, the, "", auto). If auto is chosen, the consumer of your data should chose between "a" or "an". Default is "" (blank).
og:locale - The locale these tags are marked up in. Of the format language_TERRITORY. Default is en_US.
og:locale:alternate - An array of other locales this page is available in.
og:site_name - If your object is part of a larger web site, the name which should be displayed for the overall site. e.g., "IMDb".
og:video - A URL to a video file that complements this object.
For example (line-break solely for display purposes):

&lt;meta property="og:audio" content="http://example.com/bond/theme.mp3" /&gt;
&lt;meta property="og:description" 
  content="Sean Connery found fame and fortune as the
           suave, sophisticated British agent, James Bond." /&gt;
&lt;meta property="og:determiner" content="the" /&gt;
&lt;meta property="og:locale" content="en_GB" /&gt;
&lt;meta property="og:locale:alternate" content="fr_FR" /&gt;
&lt;meta property="og:locale:alternate" content="es_ES" /&gt;
&lt;meta property="og:site_name" content="IMDb" /&gt;
&lt;meta property="og:video" content="http://example.com/bond/trailer.swf" /&gt;
The RDF schema (in Turtle) can be found at ogp.me/ns.

Structured Properties
Some properties can have extra metadata attached to them. These are specified in the same way as other metadata with property and content, but the property will have extra :.

The og:image property has some optional structured properties:

og:image:url - Identical to og:image.
og:image:secure_url - An alternate url to use if the webpage requires HTTPS.
og:image:type - A MIME type for this image.
og:image:width - The number of pixels wide.
og:image:height - The number of pixels high.
A full image example:

&lt;meta property="og:image" content="http://example.com/ogp.jpg" /&gt;
&lt;meta property="og:image:secure_url" content="https://secure.example.com/ogp.jpg" /&gt;
&lt;meta property="og:image:type" content="image/jpeg" /&gt;
&lt;meta property="og:image:width" content="400" /&gt;
&lt;meta property="og:image:height" content="300" /&gt;
The og:video tag has the identical tags as og:image. Here is an example:

&lt;meta property="og:video" content="http://example.com/movie.swf" /&gt;
&lt;meta property="og:video:secure_url" content="https://secure.example.com/movie.swf" /&gt;
&lt;meta property="og:video:type" content="application/x-shockwave-flash" /&gt;
&lt;meta property="og:video:width" content="400" /&gt;
&lt;meta property="og:video:height" content="300" /&gt;
The og:audio tag only has the first 3 properties available (since size doesn't make sense for sound):

&lt;meta property="og:audio" content="http://example.com/sound.mp3" /&gt;
&lt;meta property="og:audio:secure_url" content="https://secure.example.com/sound.mp3" /&gt;
&lt;meta property="og:audio:type" content="audio/mpeg" /&gt;
Arrays
If a tag can have multiple values, just put multiple versions of the same &lt;meta&gt; tag on your page. The first tag (from top to bottom) is given preference during conflicts.

&lt;meta property="og:image" content="http://example.com/rock.jpg" /&gt;
&lt;meta property="og:image" content="http://example.com/rock2.jpg" /&gt;
Put structured properties after you declare their root tag. Whenever another root element is parsed, that structured property is considered to be done and another one is started.

For example:

&lt;meta property="og:image" content="http://example.com/rock.jpg" /&gt;
&lt;meta property="og:image:width" content="300" /&gt;
&lt;meta property="og:image:height" content="300" /&gt;
&lt;meta property="og:image" content="http://example.com/rock2.jpg" /&gt;
&lt;meta property="og:image" content="http://example.com/rock3.jpg" /&gt;
&lt;meta property="og:image:height" content="1000" /&gt;
means there are 3 images on this page, the first image is 300x300, the middle one has unspecified dimensions, and the last one is 1000px tall.

Object Types
In order for your object to be represented within the graph, you need to specify its type. This is done using the og:type property:

&lt;meta property="og:type" content="website" /&gt;
When the community agrees on the schema for a type, it is added to the list of global types. All other objects in the type system are CURIEs of the form

&lt;head prefix="my_namespace: http://example.com/ns#"&gt;
&lt;meta property="og:type" content="my_namespace:my_type" /&gt;
The global types are grouped into verticals. Each vertical has its own namespace. The og:type values for a namespace are always prefixed with the namespace and then a period. This is to reduce confusion with user-defined namespaced types which always have colons in them.

Music
Namespace URI: http://ogp.me/ns/music#
og:type values:

music.song

music:duration - integer &gt;=1 - The song's length in seconds.
music:album - music.album array - The album this song is from.
music:album:disc - integer &gt;=1 - Which disc of the album this song is on.
music:album:track - integer &gt;=1 - Which track this song is.
music:musician - profile array - The musician that made this song.
music.album

music:song - music.song - The song on this album.
music:song:disc - integer &gt;=1 - The same as music:album:disc but in reverse.
music:song:track - integer &gt;=1 - The same as music:album:track but in reverse.
music:musician - profile - The musician that made this song.
music:release_date - datetime - The date the album was released.
music.playlist

music:song - Identical to the ones on music.album
music:song:disc
music:song:track
music:creator - profile - The creator of this playlist.
music.radio_station

music:creator - profile - The creator of this station.
Video
Namespace URI: http://ogp.me/ns/video#
og:type values:

video.movie

video:actor - profile array - Actors in the movie.
video:actor:role - string - The role they played.
video:director - profile array - Directors of the movie.
video:writer - profile array - Writers of the movie.
video:duration - integer &gt;=1 - The movie's length in seconds.
video:release_date - datetime - The date the movie was released.
video:tag - string array - Tag words associated with this movie.
video.episode

video:actor - Identical to video.movie
video:actor:role
video:director
video:writer
video:duration
video:release_date
video:tag
video:series - video.tv_show - Which series this episode belongs to.
video.tv_show

A multi-episode TV show. The metadata is identical to video.movie.

video.other

A video that doesn't belong in any other category. The metadata is identical to video.movie.

No Vertical
These are globally defined objects that just don't fit into a vertical but yet are broadly used and agreed upon.

og:type values:

article - Namespace URI: http://ogp.me/ns/article#

article:published_time - datetime - When the article was first published.
article:modified_time - datetime - When the article was last changed.
article:expiration_time - datetime - When the article is out of date after.
article:author - profile array - Writers of the article.
article:section - string - A high-level section name. E.g. Technology
article:tag - string array - Tag words associated with this article.
book - Namespace URI: http://ogp.me/ns/book#

book:author - profile array - Who wrote this book.
book:isbn - string - The ISBN
book:release_date - datetime - The date the book was released.
book:tag - string array - Tag words associated with this book.
profile - Namespace URI: http://ogp.me/ns/profile#

profile:first_name - string - A name normally given to an individual by a parent or self-chosen.
profile:last_name - string - A name inherited from a family or marriage and by which the individual is commonly known.
profile:username - string - A short unique string to identify them.
profile:gender - enum(male, female) - Their gender.
website - Namespace URI: http://ogp.me/ns/website#

No additional properties other than the basic ones. Any non-marked up webpage should be treated as og:type website.

Types
The following types are used when defining attributes in Open Graph protocol.

Type	Description	Literals
Boolean	A Boolean represents a true or false value	true, false, 1, 0
DateTime	A DateTime represents a temporal value composed of a date (year, month, day) and an optional time component (hours, minutes)	ISO 8601
Enum	A type consisting of bounded set of constant string values (enumeration members).	A string value that is a member of the enumeration
Float	A 64-bit signed floating point number	All literals that conform to the following formats:

1.234
-1.234
1.2e3
-1.2e3
7E-10
Integer	A 32-bit signed integer. In many languages integers over 32-bits become floats, so we limit Open Graph protocol for easy multi-language use.	All literals that conform to the following formats:

1234
-123
String	A sequence of Unicode characters	All literals composed of Unicode characters with no escape characters
URL	A sequence of Unicode characters that identify an Internet resource.	All valid URLs that utilize the http:// or https:// protocols
</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="OpenGraphImage">
    <xsd:annotation>
      <xsd:documentation>The og:image property has some optional structured properties:

og:image:url - Identical to og:image.
og:image:secure_url - An alternate url to use if the webpage requires HTTPS.
og:image:type - A MIME type for this image.
og:image:width - The number of pixels wide.
og:image:height - The number of pixels high.
A full image example:

&lt;meta property="og:image" content="http://example.com/ogp.jpg" /&gt;
&lt;meta property="og:image:secure_url" content="https://secure.example.com/ogp.jpg" /&gt;
&lt;meta property="og:image:type" content="image/jpeg" /&gt;
&lt;meta property="og:image:width" content="400" /&gt;
&lt;meta property="og:image:height" content="300" /&gt;</xsd:documentation>
    </xsd:annotation>
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
    <xsd:attribute name="url" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>og:image:url - Identical to og:image.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="secureUrl" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>og:image:secure_url - An alternate url to use if the webpage requires HTTPS.
</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="type" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>og:image:type - A MIME type for this image.
</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="width" type="xsd:int">
      <xsd:annotation>
        <xsd:documentation>og:image:width - The number of pixels wide.
</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="height" type="xsd:int">
      <xsd:annotation>
        <xsd:documentation>og:image:height - The number of pixels high.
</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:element name="OpenGraphImage" type="site:OpenGraphImage">
    <xsd:annotation>
      <xsd:documentation>The og:image property has some optional structured properties:

og:image:url - Identical to og:image.
og:image:secure_url - An alternate url to use if the webpage requires HTTPS.
og:image:type - A MIME type for this image.
og:image:width - The number of pixels wide.
og:image:height - The number of pixels high.
A full image example:

&lt;meta property="og:image" content="http://example.com/ogp.jpg" /&gt;
&lt;meta property="og:image:secure_url" content="https://secure.example.com/ogp.jpg" /&gt;
&lt;meta property="og:image:type" content="image/jpeg" /&gt;
&lt;meta property="og:image:width" content="400" /&gt;
&lt;meta property="og:image:height" content="300" /&gt;</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="OpenGraphVideo">
    <xsd:annotation>
      <xsd:documentation>The og:video tag has the identical tags as og:image. Here is an example:

&lt;meta property="og:video" content="http://example.com/movie.swf" /&gt;
&lt;meta property="og:video:secure_url" content="https://secure.example.com/movie.swf" /&gt;
&lt;meta property="og:video:type" content="application/x-shockwave-flash" /&gt;
&lt;meta property="og:video:width" content="400" /&gt;
&lt;meta property="og:video:height" content="300" /&gt;</xsd:documentation>
    </xsd:annotation>
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
    <xsd:attribute name="url" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>og:image:url - Identical to og:image.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="secureUrl" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>og:image:secure_url - An alternate url to use if the webpage requires HTTPS.
</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="type" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>og:image:type - A MIME type for this image.
</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="width" type="xsd:int">
      <xsd:annotation>
        <xsd:documentation>og:image:width - The number of pixels wide.
</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="height" type="xsd:int">
      <xsd:annotation>
        <xsd:documentation>og:image:height - The number of pixels high.
</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:element name="OpenGraphVideo" type="site:OpenGraphVideo">
    <xsd:annotation>
      <xsd:documentation>The og:video tag has the identical tags as og:image. Here is an example:

<meta content="http://example.com/movie.swf" property="og:video"/>
<meta content="https://secure.example.com/movie.swf" property="og:video:secure_url"/>
<meta content="application/x-shockwave-flash" property="og:video:type"/>
<meta content="400" property="og:video:width"/>
<meta content="300" property="og:video:height"/>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="OpenGraphAudio">
    <xsd:annotation>
      <xsd:documentation>The og:audio tag only has the first 3 properties available (since size doesn't make sense for sound):

&lt;meta property="og:audio" content="http://example.com/sound.mp3" /&gt;
&lt;meta property="og:audio:secure_url" content="https://secure.example.com/sound.mp3" /&gt;
&lt;meta property="og:audio:type" content="audio/mpeg" /&gt;</xsd:documentation>
    </xsd:annotation>
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
    <xsd:attribute name="url" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>og:image:url - Identical to og:image.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="secureUrl" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>og:image:secure_url - An alternate url to use if the webpage requires HTTPS.
</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="type" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>og:image:type - A MIME type for this image.
</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:element name="OpenGraphAudio" type="site:OpenGraphAudio">
    <xsd:annotation>
      <xsd:documentation>The og:audio tag only has the first 3 properties available (since size doesn't make sense for sound):

&lt;meta property="og:audio" content="http://example.com/sound.mp3" /&gt;
&lt;meta property="og:audio:secure_url" content="https://secure.example.com/sound.mp3" /&gt;
&lt;meta property="og:audio:type" content="audio/mpeg" /&gt;</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="PageSelector">
    <xsd:annotation>
      <xsd:documentation>Matches a web request against a rule and modifies the current Page object.</xsd:documentation>
    </xsd:annotation>
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
  </xsd:complexType>
  <xsd:element name="PageSelector" type="site:PageSelector">
    <xsd:annotation>
      <xsd:documentation>Matches a web request against a rule and modifies the current Page object.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="UriPatternPageSelector">
    <xsd:annotation>
      <xsd:documentation>Matches web requests using http://code.google.com/p/wo-furi/</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="site:PageSelector">
        <xsd:attribute name="pattern" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="UriPatternPageSelector" type="site:UriPatternPageSelector">
    <xsd:annotation>
      <xsd:documentation>Matches web requests using http://code.google.com/p/wo-furi/</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="PageRule">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element name="selector" type="site:PageSelector"/>
      <xsd:element name="declaration" type="site:PageDeclaration">
        <xsd:annotation>
          <xsd:documentation>What to apply when the selector matches.</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
    <xsd:attribute name="weight" type="xsd:int"/>
  </xsd:complexType>
  <xsd:element name="PageRule" type="site:PageRule"/>
  <xsd:complexType abstract="true" name="PageDeclaration">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
  </xsd:complexType>
  <xsd:element name="PageDeclaration" type="site:PageDeclaration"/>
  <xsd:complexType name="SourcePageDeclaration">
    <xsd:annotation>
      <xsd:documentation>Applies the contents of the specified "source" Page to current web request.

The Page instance must be linked via EMF, which is sometimes handy but not very flexible for runtime purposes.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="site:PageDeclaration">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="source" type="site:PageMeta"/>
        </xsd:choice>
        <xsd:attribute name="source" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SourcePageDeclaration" type="site:SourcePageDeclaration">
    <xsd:annotation>
      <xsd:documentation>Applies the contents of the specified "source" Page to current web request.

The Page instance must be linked via EMF, which is sometimes handy but not very flexible for runtime purposes.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ProcessorPageDeclaration">
    <xsd:annotation>
      <xsd:documentation>Uses a PageProcessor implementation to modify the Page for current web request.

It will be looked up in OSGi (scoped for the current tenant) using the given filters.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="site:PageDeclaration">
        <xsd:attribute name="filter" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Filter in LDAP syntax.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ProcessorPageDeclaration" type="site:ProcessorPageDeclaration">
    <xsd:annotation>
      <xsd:documentation>Uses a PageProcessor implementation to modify the Page for current web request.

It will be looked up in OSGi (scoped for the current tenant) using the given filters.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ResourcePageDeclaration">
    <xsd:annotation>
      <xsd:documentation>Loads the file from the specified bundle and the specified resource path.

This is handy to load from classpath in OSGi environments, but cannot handle overrides properly. You need a proper federating repository for that.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="site:PageDeclaration">
        <xsd:attribute name="bundle" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Bundle symbolic name that hosts the Page XMI file.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="path" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Full path to the Page XMI in the bundle, including the leading '/' and the '.xmi' extension.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ResourcePageDeclaration" type="site:ResourcePageDeclaration">
    <xsd:annotation>
      <xsd:documentation>Loads the file from the specified bundle and the specified resource path.

This is handy to load from classpath in OSGi environments, but cannot handle overrides properly. You need a proper federating repository for that.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="RepositoryPageDeclaration">
    <xsd:complexContent>
      <xsd:extension base="site:PageDeclaration">
        <xsd:attribute name="filter" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Filter to the repository in LDAP syntax. Will be looked up in OSGi.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="path" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Path to the page in the repository.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="RepositoryPageDeclaration" type="site:RepositoryPageDeclaration"/>
  <xsd:complexType name="Section">
    <xsd:annotation>
      <xsd:documentation>A large division of web application.

For example, Bippo Mall is divided into 4 sections: sys, mall, shop, and pub.</xsd:documentation>
    </xsd:annotation>
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element name="pages" type="site:Page"/>
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
    <xsd:attribute name="id" type="xsd:string" use="required"/>
    <xsd:attribute name="name" type="xsd:string" use="required"/>
  </xsd:complexType>
  <xsd:element name="Section" type="site:Section">
    <xsd:annotation>
      <xsd:documentation>A large division of web application.

For example, Bippo Mall is divided into 4 sections: sys, mall, shop, and pub.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SiteCatalog">
    <xsd:complexContent>
      <xsd:extension base="site:SectionCollection">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="pageMetas" type="site:PageMeta"/>
          <xsd:element name="pageRules" type="site:PageRule"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SiteCatalog" type="site:SiteCatalog"/>
  <xsd:complexType name="SectionCollection">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element name="sections" type="site:Section"/>
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
  </xsd:complexType>
  <xsd:element name="SectionCollection" type="site:SectionCollection"/>
  <xsd:complexType name="PageMetaCollection">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element name="pageMetas" type="site:PageMeta"/>
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
  </xsd:complexType>
  <xsd:element name="PageMetaCollection" type="site:PageMetaCollection"/>
  <xsd:complexType name="PageRuleCollection">
    <xsd:annotation>
      <xsd:documentation>Contains a list of rules.</xsd:documentation>
    </xsd:annotation>
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element name="pageRules" type="site:PageRule"/>
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
  </xsd:complexType>
  <xsd:element name="PageRuleCollection" type="site:PageRuleCollection">
    <xsd:annotation>
      <xsd:documentation>Contains a list of rules.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="PageTitle">
    <xsd:annotation>
      <xsd:documentation>Used to compose a title string.

This will set the :
- page meta title : prefixes.join(prefixSeparator) + main + suffixes.join(suffixSeparator)
- open graph meta : title &lt;= main (TODO: needs to be more configurable), e.g. we want to display "Zalova Bag - Bags" or "Zalova Bag - O Batiks" or even "Zalova Bag - Bags - O Batiks"</xsd:documentation>
    </xsd:annotation>
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element name="prefixes" nillable="true" type="xsd:string"/>
      <xsd:element name="suffixes" nillable="true" type="xsd:string"/>
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
    <xsd:attribute name="main" type="xsd:string"/>
    <xsd:attribute name="prefixSeparator" type="xsd:string"/>
    <xsd:attribute name="suffixSeparator" type="xsd:string"/>
  </xsd:complexType>
  <xsd:element name="PageTitle" type="site:PageTitle">
    <xsd:annotation>
      <xsd:documentation>Used to compose a title string.

This will set the :
- page meta title : prefixes.join(prefixSeparator) + main + suffixes.join(suffixSeparator)
- open graph meta : title &lt;= main (TODO: needs to be more configurable), e.g. we want to display "Zalova Bag - Bags" or "Zalova Bag - O Batiks" or even "Zalova Bag - Bags - O Batiks"</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="Page">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element name="params" type="site:PageParam"/>
      <xsd:element name="section" type="site:Section"/>
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
    <xsd:attribute name="name" type="xsd:string" use="required">
      <xsd:annotation>
        <xsd:documentation>The resulting simple name of the Wicket Page subclass, e.g. "ProductSysTable", without the "Page" suffix.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="mountPoint" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>Where the page is mounted, relative to application root, e.g. /product/sys, or a URI template with parameters: /product/sys/show/${productId}

mountPoint is highly recommended for SEO and easy URI typing, but not mandatory.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="section" type="xsd:string"/>
  </xsd:complexType>
  <xsd:element name="Page" type="site:Page"/>
  <xsd:complexType name="GenericPage">
    <xsd:annotation>
      <xsd:documentation>A page that that specifies the literal Wicket page class name</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="site:Page"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="GenericPage" type="site:GenericPage">
    <xsd:annotation>
      <xsd:documentation>A page that that specifies the literal Wicket page class name</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="RawEntityTablePage">
    <xsd:annotation>
      <xsd:documentation>Lists raw entities in a page using Backbone and jQuery DataTables.

For normal entities see EntityTablePage.

Entities can be added, shown, and deleted.

Features:
* client-side paging support
* client-side quick search
* client-side table column sorting

TODO: support push for dynamic add/remove and show status.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="site:Page"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="RawEntityTablePage" type="site:RawEntityTablePage">
    <xsd:annotation>
      <xsd:documentation>Lists raw entities in a page using Backbone and jQuery DataTables.

For normal entities see EntityTablePage.

Entities can be added, shown, and deleted.

Features:
* client-side paging support
* client-side quick search
* client-side table column sorting

TODO: support push for dynamic add/remove and show status.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="EntityTablePage">
    <xsd:annotation>
      <xsd:documentation>Lists normal entities in a page using Backbone and jQuery DataTables.

For raw entities see RawEntity TablePage.

Supported folders:
1. Published (virtual; published only)
2. All Items (virtual; except deleted)
3. Drafts (virtual)
4. Trash (virtual)

Actions on entities:
1. add
2. show
3. delete
4. undelete
5. publish (draft-&gt;published)
6. unpublish (published-&gt;draft; some entities may not support this)

Features:
* client-side paging support
* client-side quick search
* client-side table column sorting

TODO: support push for dynamic add/remove and show status.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="site:Page"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="EntityTablePage" type="site:EntityTablePage">
    <xsd:annotation>
      <xsd:documentation>Lists normal entities in a page using Backbone and jQuery DataTables.

For raw entities see RawEntity TablePage.

Supported folders:
1. Published (virtual; published only)
2. All Items (virtual; except deleted)
3. Drafts (virtual)
4. Trash (virtual)

Actions on entities:
1. add
2. show
3. delete
4. undelete
5. publish (draft-&gt;published)
6. unpublish (published-&gt;draft; some entities may not support this)

Features:
* client-side paging support
* client-side quick search
* client-side table column sorting

TODO: support push for dynamic add/remove and show status.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="EntityEditPage">
    <xsd:annotation>
      <xsd:documentation>Edit page for normal entities</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="site:Page"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="EntityEditPage" type="site:EntityEditPage">
    <xsd:annotation>
      <xsd:documentation>Edit page for normal entities</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="RawEntityEditPage">
    <xsd:annotation>
      <xsd:documentation>Edit page for raw entities</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="site:Page"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="RawEntityEditPage" type="site:RawEntityEditPage">
    <xsd:annotation>
      <xsd:documentation>Edit page for raw entities</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="RawEntityNewPage">
    <xsd:annotation>
      <xsd:documentation>New normal entity page</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="site:Page"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="RawEntityNewPage" type="site:RawEntityNewPage">
    <xsd:annotation>
      <xsd:documentation>New normal entity page</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="EntityNewPage">
    <xsd:annotation>
      <xsd:documentation>New raw entity page</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="site:Page"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="EntityNewPage" type="site:EntityNewPage">
    <xsd:annotation>
      <xsd:documentation>New raw entity page</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ContentPage">
    <xsd:annotation>
      <xsd:documentation>Contains static but editable HTML content.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="site:Page"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ContentPage" type="site:ContentPage">
    <xsd:annotation>
      <xsd:documentation>Contains static but editable HTML content.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="DashboardPage">
    <xsd:annotation>
      <xsd:documentation>A page that can be customized by admin.

Typically used for homepage.

The layout is a bit different than other pages because it has a header and a slider/carousel after the header.
The sidebar is below the header and the carousel.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="site:Page"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="DashboardPage" type="site:DashboardPage">
    <xsd:annotation>
      <xsd:documentation>A page that can be customized by admin.

Typically used for homepage.

The layout is a bit different than other pages because it has a header and a slider/carousel after the header.
The sidebar is below the header and the carousel.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="PageParam">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
    <xsd:attribute name="name" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>Parameter name for the page, e.g. "productId".</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:element name="PageParam" type="site:PageParam"/>
  <xsd:complexType name="LoginPage">
    <xsd:annotation>
      <xsd:documentation>Login page, that also serves as a SSO register page for Facebook, Twitter, Google, etc.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="site:Page">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="registerPage" type="site:RegisterPage"/>
          <xsd:element name="resetPasswordPage" type="site:ResetPasswordPage"/>
        </xsd:choice>
        <xsd:attribute name="registerPage" type="xsd:string"/>
        <xsd:attribute name="resetPasswordPage" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="LoginPage" type="site:LoginPage">
    <xsd:annotation>
      <xsd:documentation>Login page, that also serves as a SSO register page for Facebook, Twitter, Google, etc.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="RegisterPage">
    <xsd:annotation>
      <xsd:documentation>Register as user via email.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="site:Page"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="RegisterPage" type="site:RegisterPage">
    <xsd:annotation>
      <xsd:documentation>Register as user via email.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ResetPasswordPage">
    <xsd:annotation>
      <xsd:documentation>Used to reset password if user forgets the password.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="site:Page"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ResetPasswordPage" type="site:ResetPasswordPage">
    <xsd:annotation>
      <xsd:documentation>Used to reset password if user forgets the password.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
</xsd:schema>

<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xsd:schema xmlns:site="http://www.soluvas.org/schema/web.site/1.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsd="http://www.w3.org/2001/XMLSchema" targetNamespace="http://www.soluvas.org/schema/web.site/1.0">
  <xsd:import namespace="http://www.omg.org/XMI" schemaLocation="platform:/plugin/org.eclipse.emf.ecore/model/XMI.xsd"/>
  <xsd:complexType name="Section">
    <xsd:annotation>
      <xsd:documentation>A large division of web application.

For example, Bippo Mall is divided into 4 sections: sys, mall, shop, and pub.</xsd:documentation>
    </xsd:annotation>
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element name="pages" type="site:Page"/>
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
    <xsd:attribute name="id" type="xsd:string" use="required"/>
    <xsd:attribute name="name" type="xsd:string" use="required"/>
  </xsd:complexType>
  <xsd:element name="Section" type="site:Section">
    <xsd:annotation>
      <xsd:documentation>A large division of web application.

For example, Bippo Mall is divided into 4 sections: sys, mall, shop, and pub.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SiteCatalog">
    <xsd:annotation>
      <xsd:documentation>The site catalog is used to define all *logical* sections and pages in a site.

It is used in 2 ways:
1. at generation time, to generate concrete page classes, Wicket HTML markup, and JS files.
2. at runtime, to inspect *logical* sections and pages in the site.

Note that information about actual concrete page classes etc. are not visible here, and if needed, then it should be described using another schema.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="site:SectionCollection"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SiteCatalog" type="site:SiteCatalog">
    <xsd:annotation>
      <xsd:documentation>The site catalog is used to define all *logical* sections and pages in a site.

It is used in 2 ways:
1. at generation time, to generate concrete page classes, Wicket HTML markup, and JS files.
2. at runtime, to inspect *logical* sections and pages in the site.

Note that information about actual concrete page classes etc. are not visible here, and if needed, then it should be described using another schema.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="SectionCollection">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element name="sections" type="site:Section"/>
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
  </xsd:complexType>
  <xsd:element name="SectionCollection" type="site:SectionCollection"/>
  <xsd:complexType abstract="true" name="Page">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element name="params" type="site:PageParam"/>
      <xsd:element name="section" type="site:Section"/>
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
    <xsd:attribute name="name" type="xsd:string" use="required">
      <xsd:annotation>
        <xsd:documentation>The resulting simple name of the Wicket Page subclass, e.g. "ProductSysTable", without the "Page" suffix.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="mountPoint" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>Where the page is mounted, relative to application root, e.g. /product/sys, or a URI template with parameters: /product/sys/show/${productId}

mountPoint is highly recommended for SEO and easy URI typing, but not mandatory.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="section" type="xsd:string"/>
  </xsd:complexType>
  <xsd:element name="Page" type="site:Page"/>
  <xsd:complexType name="GenericPage">
    <xsd:annotation>
      <xsd:documentation>A page that that specifies the literal Wicket page class name</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="site:Page"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="GenericPage" type="site:GenericPage">
    <xsd:annotation>
      <xsd:documentation>A page that that specifies the literal Wicket page class name</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="RawEntityTablePage">
    <xsd:annotation>
      <xsd:documentation>Lists raw entities in a page using Backbone and jQuery DataTables.

For normal entities see EntityTablePage.

Entities can be added, shown, and deleted.

Features:
* client-side paging support
* client-side quick search
* client-side table column sorting

TODO: support push for dynamic add/remove and show status.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="site:Page">
        <xsd:attribute name="entityClass" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Full name of the class that represents the entity.

This is required for:
1. Getting the EntityRepository for the entity, scoped to the active tenant
2. Getting the EntityDescriptor which provides metadata about the entity, scoped to the active tenant
</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="RawEntityTablePage" type="site:RawEntityTablePage">
    <xsd:annotation>
      <xsd:documentation>Lists raw entities in a page using Backbone and jQuery DataTables.

For normal entities see EntityTablePage.

Entities can be added, shown, and deleted.

Features:
* client-side paging support
* client-side quick search
* client-side table column sorting

TODO: support push for dynamic add/remove and show status.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="EntityTablePage">
    <xsd:annotation>
      <xsd:documentation>Lists normal entities in a page using Backbone and jQuery DataTables.

For raw entities see RawEntity TablePage.

Supported folders:
1. Published (virtual; published only)
2. All Items (virtual; except deleted)
3. Drafts (virtual)
4. Trash (virtual)

Actions on entities:
1. add
2. show
3. delete
4. undelete
5. publish (draft-&gt;published)
6. unpublish (published-&gt;draft; some entities may not support this)

Features:
* client-side paging support
* client-side quick search
* client-side table column sorting

TODO: support push for dynamic add/remove and show status.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="site:Page">
        <xsd:attribute name="entityClass" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Full name of the class that represents the entity.

This is required for:
1. Getting the EntityRepository for the entity, scoped to the active tenant
2. Getting the EntityDescriptor which provides metadata about the entity, scoped to the active tenant
</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="EntityTablePage" type="site:EntityTablePage">
    <xsd:annotation>
      <xsd:documentation>Lists normal entities in a page using Backbone and jQuery DataTables.

For raw entities see RawEntity TablePage.

Supported folders:
1. Published (virtual; published only)
2. All Items (virtual; except deleted)
3. Drafts (virtual)
4. Trash (virtual)

Actions on entities:
1. add
2. show
3. delete
4. undelete
5. publish (draft-&gt;published)
6. unpublish (published-&gt;draft; some entities may not support this)

Features:
* client-side paging support
* client-side quick search
* client-side table column sorting

TODO: support push for dynamic add/remove and show status.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="EntityEditPage">
    <xsd:annotation>
      <xsd:documentation>Edit page for normal entities</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="site:Page">
        <xsd:attribute name="entityClass" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Full name of the class that represents the entity.

This is required for:
1. Getting the EntityRepository for the entity, scoped to the active tenant
2. Getting the EntityDescriptor which provides metadata about the entity, scoped to the active tenant
</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="EntityEditPage" type="site:EntityEditPage">
    <xsd:annotation>
      <xsd:documentation>Edit page for normal entities</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="RawEntityEditPage">
    <xsd:annotation>
      <xsd:documentation>Edit page for raw entities</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="site:Page">
        <xsd:attribute name="entityClass" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Full name of the class that represents the entity.

This is required for:
1. Getting the EntityRepository for the entity, scoped to the active tenant
2. Getting the EntityDescriptor which provides metadata about the entity, scoped to the active tenant
</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="RawEntityEditPage" type="site:RawEntityEditPage">
    <xsd:annotation>
      <xsd:documentation>Edit page for raw entities</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="RawEntityNewPage">
    <xsd:annotation>
      <xsd:documentation>New normal entity page</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="site:Page">
        <xsd:attribute name="entityClass" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Full name of the class that represents the entity.

This is required for:
1. Getting the EntityRepository for the entity, scoped to the active tenant
2. Getting the EntityDescriptor which provides metadata about the entity, scoped to the active tenant
</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="RawEntityNewPage" type="site:RawEntityNewPage">
    <xsd:annotation>
      <xsd:documentation>New normal entity page</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="EntityNewPage">
    <xsd:annotation>
      <xsd:documentation>New raw entity page</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="site:Page">
        <xsd:attribute name="entityClass" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Full name of the class that represents the entity.

This is required for:
1. Getting the EntityRepository for the entity, scoped to the active tenant
2. Getting the EntityDescriptor which provides metadata about the entity, scoped to the active tenant
</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="EntityNewPage" type="site:EntityNewPage">
    <xsd:annotation>
      <xsd:documentation>New raw entity page</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ContentPage">
    <xsd:annotation>
      <xsd:documentation>Contains static but editable HTML content.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="site:Page"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ContentPage" type="site:ContentPage">
    <xsd:annotation>
      <xsd:documentation>Contains static but editable HTML content.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="DashboardPage">
    <xsd:annotation>
      <xsd:documentation>A page that can be customized by admin.

Typically used for homepage.

The layout is a bit different than other pages because it has a header and a slider/carousel after the header.
The sidebar is below the header and the carousel.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="site:Page"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="DashboardPage" type="site:DashboardPage">
    <xsd:annotation>
      <xsd:documentation>A page that can be customized by admin.

Typically used for homepage.

The layout is a bit different than other pages because it has a header and a slider/carousel after the header.
The sidebar is below the header and the carousel.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="PageParam">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
    <xsd:attribute name="name" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>Parameter name for the page, e.g. "productId".</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:element name="PageParam" type="site:PageParam"/>
  <xsd:complexType name="LoginPage">
    <xsd:annotation>
      <xsd:documentation>Login page, that also serves as a SSO register page for Facebook, Twitter, Google, etc.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="site:Page">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element name="registerPage" type="site:RegisterPage"/>
          <xsd:element name="resetPasswordPage" type="site:ResetPasswordPage"/>
        </xsd:choice>
        <xsd:attribute name="registerPage" type="xsd:string"/>
        <xsd:attribute name="resetPasswordPage" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="LoginPage" type="site:LoginPage">
    <xsd:annotation>
      <xsd:documentation>Login page, that also serves as a SSO register page for Facebook, Twitter, Google, etc.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="RegisterPage">
    <xsd:annotation>
      <xsd:documentation>Register as user via email.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="site:Page"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="RegisterPage" type="site:RegisterPage">
    <xsd:annotation>
      <xsd:documentation>Register as user via email.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="ResetPasswordPage">
    <xsd:annotation>
      <xsd:documentation>Used to reset password if user forgets the password.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="site:Page"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ResetPasswordPage" type="site:ResetPasswordPage">
    <xsd:annotation>
      <xsd:documentation>Used to reset password if user forgets the password.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType abstract="true" name="EntityPage">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
    <xsd:attribute name="entityClass" type="xsd:string" use="required">
      <xsd:annotation>
        <xsd:documentation>Full name of the class that represents the entity.

This is required for:
1. Getting the EntityRepository for the entity, scoped to the active tenant
2. Getting the EntityDescriptor which provides metadata about the entity, scoped to the active tenant
</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:element name="EntityPage" type="site:EntityPage"/>
  <xsd:complexType name="PermalinkCatalog">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element name="permalinks" type="site:Permalink"/>
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
  </xsd:complexType>
  <xsd:element name="PermalinkCatalog" type="site:PermalinkCatalog"/>
  <xsd:complexType name="Permalink">
    <xsd:annotation>
      <xsd:documentation>Permalink configuration for an entity.</xsd:documentation>
    </xsd:annotation>
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
    <xsd:attribute name="namespace" type="xsd:string" use="required">
      <xsd:annotation>
        <xsd:documentation>e.g. person, shop, etc.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="template" type="xsd:string" use="required">
      <xsd:annotation>
        <xsd:documentation>Recognized values are:

&lt;ol&gt;
&lt;li&gt;baseUri (from WebAddress, automatically chosen whether relative ('/'), absolute plain HTTP, or absolute HTTPS),
including scheme and port, and trailing slash.&lt;/li&gt;
&lt;li&gt;slugPath&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Reference: https://github.com/damnhandy/Handy-URI-Templates</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:element name="Permalink" type="site:Permalink">
    <xsd:annotation>
      <xsd:documentation>Permalink configuration for an entity.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="PermalinkManager">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element ref="xmi:Extension"/>
    </xsd:choice>
    <xsd:attribute ref="xmi:id"/>
    <xsd:attributeGroup ref="xmi:ObjectAttribs"/>
  </xsd:complexType>
  <xsd:element name="PermalinkManager" type="site:PermalinkManager"/>
</xsd:schema>
